# -*- coding: utf-8 -*-
"""wine_quality_binary_classification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/hamdiibnizhar/bangkit-w05-winequality/blob/master/bangkit-w05-winequality.ipynb
"""

!pip install -q git+https://github.com/tensorflow/docs

import tensorflow as tf
import numpy as np
import pandas as pd
from tensorflow import keras
from tensorflow.keras import layers

print(tf.__version__)

import tensorflow_docs as tfdocs
import tensorflow_docs.plots
import tensorflow_docs.modeling

import os
from google.colab import drive
drive.mount('/content/gdrive')

url = 'https://raw.githubusercontent.com/hamdiibnizhar/bangkit-w05-winequality/master/datasets/winequality-red.csv'
df = pd.read_csv(url, error_bad_lines=False)

df.head(10)

df.info()

df.shape

df.columns

import matplotlib.pyplot as plt
import seaborn as sns
import pandas.util.testing as tm
from collections import Counter

Counter(df['quality'])

sns.pairplot(df)

sns.countplot(x='quality', data=df)

qualityString = []
for i in df['quality'] :
  if 0 <= i < 5 :
    qualityString.append(0)
  elif 5 <= i < 7 :
    qualityString.append(1)
  else :
    qualityString.append(2)
df['Rating'] = qualityString

df

# df['Rating'] = df['Rating'].map({0: 'Bad', 1: 'Good'})
# df = pd.get_dummies(df, prefix='', prefix_sep='')
# df.tail()

df.describe()

dataset = df.copy()
dataset.pop("quality")

train_dataset = dataset.sample(frac=0.8,random_state=0)
test_dataset = dataset.drop(train_dataset.index)

# sns.pairplot(dataset)

train_dataset

len(train_dataset.keys())

train_stats = train_dataset.describe()
train_stats.pop("Rating")
train_stats = train_stats.transpose()
train_stats

train_labels = train_dataset.pop('Rating')
test_labels = test_dataset.pop('Rating')

def norm(x):
  return (x - train_stats['mean']) / train_stats['std']
normed_train_data = norm(train_dataset)
normed_test_data = norm(test_dataset)

train_labels.shape

def build_model():
  model = keras.Sequential([
    layers.Flatten(input_shape=[(len(train_dataset.keys()))]),
    # layers.Dense(64, activation='relu', input_shape=[(len(train_dataset.keys()))]),
    # layers.Dense(16, activation='relu'),
    layers.Dense(128, activation='relu'),
    # layers.Dense(64, activation='relu'),
    # layers.Dense(2, activation=tf.nn.sigmoid),
    # tf.keras.layers.Dropout(0.2),
    layers.Dense(3),
  ])

  optimizer = tf.keras.optimizers.Adam(learning_rate=0.01)

  model.compile(optimizer=optimizer,
              # loss='binary_crossentropy',
              # loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),
              loss=tf.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])
  return model

model = build_model()
model.summary()

# example_batch = normed_train_data[:10]
# example_result = model.predict(example_batch)
# example_result

EPOCHS = 1000

checkpoint_path = "/content/gdrive/My Drive/Trained_Models/wine_binary_quality/wine_binary_quality.ckpt"
checkpoint_dir = os.path.dirname(checkpoint_path)

cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_path,
                                                 save_weights_only=True,
                                                 verbose=1)
history = model.fit(
  normed_train_data, train_labels,
  # train_dataset, train_labels,
  epochs=EPOCHS, 
  # validation_split = 0.2, 
  # verbose=0,
  # callbacks=[cp_callback])
  # callbacks=[tfdocs.modeling.EpochDots()])
  # batch_size=1
  )

test_loss, test_acc = model.evaluate(normed_test_data, test_labels, verbose=2)
# test_loss, test_acc = model.evaluate(test_dataset, test_labels, verbose=2)
print('Test accuracy:', test_acc)

probability_model = tf.keras.Sequential([model, 
                                         tf.keras.layers.Softmax()])

predictions = probability_model.predict(
    # test_dataset)
    normed_test_data)
predictions

test_labels

i = len(predictions)
np.argmax(predictions[i-1])

checkpoint_path = "/content/gdrive/My Drive/Trained_Models/wine_binary_classifier/cp.ckpt"
checkpoint_dir = os.path.dirname(checkpoint_path)

model.save_weights('/content/gdrive/My Drive/Trained_Models/wine_binary_classifier/wine_binary_quality_model')

model_save_name = 'wine_binary_classifier'
save_model_path = '/content/gdrive/My Drive/Trained_Models/wine_binary_classifier'

model.save(save_model_path)

model.save('/content/gdrive/My Drive/Trained_Models/wine_binary_classifier/wine_binary_classifier.h5')

converter = tf.lite.TFLiteConverter.from_saved_model(save_model_path)
tflite_model = converter.convert()
open("/content/gdrive/My Drive/Trained_Models/wine_binary_classifier/wine_binary_classifier.tflite", "wb").write(tflite_model)

